<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\leiqunni\Documents\Visual Studio 2015\Projects\LDI\LDI\bin\Release\LDI.exe">
   <Modules>
    <Module Name="ldi.exe">
     <Namespaces>
      <Namespace Name="LDI">
       <Types>
        <Type Name="CIndicator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String[],LDI.CSkin)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2015-10-18 08:11:44Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\leiqunni\Documents\Visual Studio 2015\Projects\LDI\LDI" File="CIndicator.vb" Line="30">'CIndicator.New(String(), CSkin)' は LinkDemand を伴う 'Bitmap.GetHicon()' 内への呼び出しを行います。この呼び出しを行うことによって、'Bitmap.GetHicon()' は間接的にユーザー コードに公開されます。セキュリティの保護を回避する方法を公開する可能性のある次の呼び出し履歴を確認してください: &#xD;&#xA;   -&gt;'CIndicator.New(String(), CSkin)'&#xD;&#xA;   -&gt;'CIndicator.New(String(), CSkin)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>リンク要求を含むメソッドを間接的に公開しません</Name>
   <Description>セキュリティ チェックを実行しないメソッドを伴う LinkDemand によって保護されたメソッドをラップしないでください。LinkDemand は、呼び出し履歴内のすべての呼び出し元のアクセス許可を確認するよりも、即時呼び出し元のアクセス許可を確認します。この場合、ラップする側のメソッドのアクセス許可が確認されます。ラップする側のメソッドが呼び出し履歴内の上部呼び出し元のアクセス許可を確認しない場合は、十分なアクセス許可を所有しない悪意のあるコードが、ラップされた関数を実行する可能性があります。</Description>
   <Resolution Name="Default">{0} は LinkDemand を伴う {1} 内への呼び出しを行います。この呼び出しを行うことによって、{1} は間接的にユーザー コードに公開されます。セキュリティの保護を回避する方法を公開する可能性のある次の呼び出し履歴を確認してください: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">カテゴリ</String>
  <String Key="Certainty">確実性</String>
  <String Key="CollapseAll">すべて折りたたむ</String>
  <String Key="CheckId">ID の確認</String>
  <String Key="Error">エラー</String>
  <String Key="Errors">エラー</String>
  <String Key="ExpandAll">すべて展開</String>
  <String Key="Help">ヘルプ</String>
  <String Key="Line">行</String>
  <String Key="Messages">メッセージ</String>
  <String Key="LocationNotStoredInPdb">[場所は Pdb に格納されていません]</String>
  <String Key="Project">プロジェクト</String>
  <String Key="Resolution">解像度</String>
  <String Key="Rule">ルール</String>
  <String Key="RuleFile">規則ファイル</String>
  <String Key="RuleDescription">規則の説明</String>
  <String Key="Source">ソース</String>
  <String Key="Status">状態</String>
  <String Key="Target">ターゲット</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">コード分析レポート</String>
 </Localized>
</FxCopReport>
